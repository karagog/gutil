/*Copyright 2014 George Karagoulis

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.*/

#include "hash.h"

NAMESPACE_GUTIL;


// This is data I generated with rand()
static GUINT32 const __hash_lut[256] = {
    0x7a14376d, 0x9b935197, 0xef5bec29, 0x5325f03a, 0x0e6a00ae, 0x06c851b7, 0x34a7bd9a, 0x551c13b7,
    0xe20eb2c4, 0x43975659, 0x40ac31b1, 0xb8013eaf, 0x9527d21f, 0xfff7743f, 0xd034ee7d, 0x486ca483,
    0x031f2571, 0x27240069, 0xe247d951, 0x1437bbd4, 0x48a0b0aa, 0xe9948f1a, 0xb32f16bd, 0x677b3884,
    0xc391b8fc, 0xb101f7d1, 0xbf740b92, 0xcf9010b3, 0x0f1cc3d8, 0x2c654d51, 0xc3e05ce0, 0x191078c3,
    0x0baa95ee, 0x48f8e499, 0xbd7beffa, 0x51d4e554, 0xd3e53230, 0x303353ea, 0xea8ee970, 0xc5f50c47,
    0xc4b4e1cf, 0x53cf6fc7, 0xc6a3ae13, 0x02cbe1bd, 0x7a41263b, 0x5ec54cf0, 0x0e83e4f5, 0xd5f09b18,
    0xd4f5c725, 0x3c4f3f65, 0xc1367065, 0x4b3cadf8, 0xee79c77f, 0x1ce5de68, 0x190576f5, 0xb0cacd3f,
    0x25b66d7a, 0x6a40fd7a, 0x957a5c76, 0x92f1f10d, 0x15d43c86, 0xd359b15c, 0xf25dc7fa, 0xbe4b4cc3,
    0x9d3efb55, 0x456a500f, 0x2cb89bd1, 0x40b05402, 0xd99caed8, 0xecea6ed3, 0x81d3fe8b, 0x673abdac,
    0x26d79a3f, 0x3594e12b, 0x6d3754fb, 0xbe427ee1, 0x211744fb, 0xcd60bdd6, 0xaeae4431, 0x1360cb03,
    0xa7c772bf, 0xa28858d6, 0x4041b07d, 0x736f18b2, 0xd48f2779, 0xe083456c, 0x6138c072, 0x2a861ccf,
    0x0757aa5d, 0xf40c5c18, 0x8d1cd7e0, 0xc6feca7b, 0xdc4a7eda, 0x8c1baf9d, 0x82b79bd9, 0x14725818,
    0x30cf6aa1, 0x93e995fa, 0x3c11f0ac, 0x21b93b46, 0x209172a4, 0x38efa271, 0xf974fceb, 0x39ed28e6,
    0x0977dc14, 0xe8e7ac83, 0x36682467, 0xeb66141a, 0x88ab2b61, 0x4ec8c7f1, 0xaeb70c32, 0x02be3442,
    0x7a96253d, 0x59cd49bc, 0x61699a9b, 0x8bcefc00, 0xfce2d098, 0x356ec624, 0x8ac8f235, 0xd5af2333,
    0x6b7670a4, 0x4f6513ab, 0xa65c7bcf, 0x6bb99cfe, 0x647c8ad2, 0x55a94613, 0x73eed77c, 0x1b869dc2,
    0xc45de3d2, 0x3375b35a, 0xee88ee8c, 0xf2ef9c1f, 0xa8c28096, 0x1641efc4, 0x5272e390, 0x3d0c4cf6,
    0x6d94a64e, 0x6bc6d0d1, 0x1f361c59, 0x8837a368, 0xb1fcdb6c, 0xe0fd6b41, 0x109c3df8, 0xa109d5d7,
    0x4f63e2a0, 0x61201317, 0x22ae2cbe, 0x955a59e3, 0x6572c2dc, 0x1ba65f92, 0x93b40e3c, 0xb145e36d,
    0x5011bf51, 0x7b4a2433, 0xe0384743, 0x81216797, 0xad6b5e6f, 0x2f0476bd, 0xc5027de5, 0xd4871cc1,
    0x59e864e8, 0x230eaa30, 0x401c9571, 0xb551758c, 0x7231d6ac, 0x84df56cc, 0x8dceb37a, 0x719828da,
    0x532efaed, 0xc0324e13, 0x29a13dcf, 0x97b52acb, 0x9a0a531c, 0x82ffa7c6, 0xd25fd883, 0xf241b0c0,
    0x242ca8e9, 0xb97fb7e6, 0x851068e6, 0x90142f5b, 0x0e3ffd45, 0x922c12b4, 0x7efe1388, 0xbe485c7c,
    0xb62a9763, 0x78bd8db1, 0x3bb13d3c, 0x09352b44, 0xb717fbb1, 0x1a2d3e9d, 0x78f38c12, 0x3d75d315,
    0xef70eee3, 0x64b47a7a, 0x33cce55b, 0x68e1c78f, 0x7cdc76e8, 0x84cbd589, 0xa8866ca8, 0xd792be93,
    0xb945d6f1, 0xe52b244b, 0x55a987cb, 0x16e0ab43, 0x44d49570, 0x36ce7c81, 0xf6ffdbd3, 0xf465c4ff,
    0xfbf37716, 0x63ec332b, 0x89904c12, 0x7cfa7e68, 0xf94981d3, 0x9afedd8b, 0x4aa5001a, 0xfcb88e60,
    0x9dc0f8d9, 0x46bd5023, 0xb7c85cba, 0x01f7e907, 0x82816199, 0x1622a0b2, 0x8cc10405, 0x5751c3be,
    0x86f582c3, 0xf7672339, 0xc79ade4b, 0x0c9e9326, 0xc7c55e48, 0x14046dfb, 0xa49b0e1c, 0x6df80c21,
    0xa0d93c5b, 0xdcb25377, 0xa14efa4b, 0x07b825d0, 0xb05ca06a, 0xfb6aea70, 0x7a7b47e8, 0xa7771192,
    0xd2b64f29, 0x5e6589e5, 0x2d2cda44, 0x590d460a, 0x25904e86, 0x331dc218, 0xf7a9d7f0, 0x6b957918,
    0x04d2e2b5, 0xe54a6c8a, 0x547ba3bd, 0x6a659fde, 0x0ea79125, 0x24e59bfb, 0x016ce5bc, 0x2219edbc
};

IClonable *Hash::Clone() const
{
    return new Hash;
}

void Hash::AddData(byte const *b, GUINT32 len)
{
    // XOR, add one and rotate one byte to the right.
    // Adding one for every byte has the effect of including the length of the data in the hash,
    //  so sequences of the same byte but different lengths do not hash the same.
    // Rotating has the effect that strings with the same characters do not hash the same if they're not
    //  in the same order.
    for(GUINT32 i = 0; i < len; ++i){
        m_hash = (m_hash + 1) ^ __hash_lut[b[i]];
        m_hash = (m_hash >> 8) | (m_hash << 24);
    }
}

void Hash::Final(byte *out)
{
    GUINT32 hash = Final();
    out[0] = hash >> 24;
    out[1] = hash >> 16;
    out[2] = hash >> 8;
    out[3] = hash;
}

GUINT32 Hash::Final()
{
    GUINT32 ret = m_hash;
    m_hash = 0;
    return ret;
}


END_NAMESPACE_GUTIL;
