/*Copyright 2010 George Karagoulis

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.*/

#include "gdatabaseiodevice.h"
#include "DataObjects/DataSet/datatable.h"
#include "DataObjects/DataSet/datarow.h"
#include <QSqlQuery>
#include <QSqlError>
#include <QSqlResult>
using namespace GUtil;
using namespace DataObjects;
using namespace DataAccess;

GDatabaseIODevice::GDatabaseIODevice(const QSqlDatabase &db,
                                     QObject *parent)
    :GIODevice(parent),
    _p_WriteCommand(Noop),
    _database(db),
    _selection_parameters(new DataTable())
{}

GDatabaseIODevice::~GDatabaseIODevice()
{
    delete _selection_parameters;
}

void GDatabaseIODevice::send_data(const QByteArray &d)
        throw(Core::DataTransportException)
{
    DataTable t;
    try
    {
        t.FromXmlQString(d);
    }
    catch(Core::XmlException &ex)
    {
        THROW_NEW_GUTIL_EXCEPTION3(Core::DataTransportException,
                                  "Not a valid XML string",
                                  ex);
    }

    if(t.ColumnCount() == 0 || t.RowCount() == 0)
        THROW_NEW_GUTIL_EXCEPTION2(Core::DataTransportException,
                                   "No data to send");

    _database.open();
    try
    {
        for(int i = 0; i < t.RowCount(); i++)
        {
            DataRow row(t[i]);

            QSqlQuery query(_database);
            QString where;
            QString values;
            int cnt(0);
            switch(GetWriteCommand())
            {
            case Insert:
                for(int j = 0; j < t.ColumnCount(); j++)
                {
                    values.append(QString(":val%1,").arg(j));
                    where.append(QString("%1,").arg(t.ColumnKeys()[j]));
                }

                // Remove the trailing comma
                values.remove(values.length() - 1, 1);
                where.remove(where.length() - 1, 1);

                // Prepare the query string
                query.prepare(QString("INSERT INTO %1 (%2) VALUES (%3)")
                      .arg(t.Name())
                      .arg(where)
                      .arg(values));

                // Bind values after preparing the query
                for(int j = 0; j < t.ColumnCount(); j++)
                    query.bindValue(j, row[j]);

                break;
            case Update:
                if(t.KeyColumns().count() == 0)
                    THROW_NEW_GUTIL_EXCEPTION2(Core::DataTransportException,
                                               "The table is required to have"
                                               " at least one key column");

                for(int j = 0; j < t.KeyColumns().count(); j++)
                {
                    // The where clause is generated by looking at the key
                    //  columns which have non-null values, and the
                    //  values clause is made by looking at all other columns
                    //  with a value.
                }

                break;
            case Delete:
                for(int j = 0; j < t.ColumnCount(); j++)
                {
                    if(!row[j].isNull())
                    {
                        where.append(QString("%1=:val%2 AND ")
                                    .arg(t.ColumnKeys()[j])
                                    .arg(cnt));
                        cnt++;
                    }
                }

                if(where.length() == 0)
                    THROW_NEW_GUTIL_EXCEPTION2(Core::DataTransportException,
                                               "No parameters set for deletion");

                // Remove the trailing 'and'
                where.remove(where.length() - 5, 5);

                query.prepare(QString("DELETE FROM %1 WHERE %2")
                      .arg(t.Name())
                      .arg(where));

                cnt = 0;
                for(int j = 0; j < t.ColumnCount(); j++)
                {
                    if(!row[j].isNull())
                        query.bindValue(cnt++, row[j]);
                }

                break;
            default:
                return;
            }

            if(query.exec())
            {
                _p_ReturnValue.clear();

                switch(GetWriteCommand())
                {
                case Insert:
                    break;
                case Update:
                    break;
                case Delete:
                    // This is supposed to return the number of rows affected,
                    //  but I'm not sure if that's what it does
                    _p_ReturnValue = query.value(0);
                    break;
                default:
                    return;
                }
            }
            else
            {
                Core::DataTransportException ex("Query Failed");
                ex.SetData("error", query.lastError().text().toStdString());
                ex.SetData("query", query.lastQuery().toStdString());

                for(int k = 0; k < query.boundValues().count(); k++)
                {
                    ex.SetData(QString("Bound Value %1").arg(k).toStdString(),
                               query.boundValue(k).toString().toStdString());
                }

                THROW_GUTIL_EXCEPTION(ex);
            }
        }
    }
    catch(Core::Exception &)
    {
        _database.close();
        throw;
    }

    _database.close();
}

QByteArray GDatabaseIODevice::receive_data()
        throw(Core::DataTransportException)
{
    if(_selection_parameters->RowCount() == 0 ||
       _selection_parameters->ColumnCount() == 0)
        THROW_NEW_GUTIL_EXCEPTION2( Core::DataTransportException,
                                    "You have not specified any parameters "
                                    "for the selection");

    QByteArray ret;
    QString sql;
    QString values, where;
    QSqlQuery query(_database);

    _database.open();
    try
    {
        DataRow r(_selection_parameters->Rows()[0]);

        for(int i = 0; i < _selection_parameters->ColumnCount(); i++)
        {
            values.append(QString("%1,")
                          .arg(_selection_parameters->ColumnKeys()[i]));
        }
        values.remove(values.length() - 1, 1);


        int cnt(0);
        for(int i = 0; i < _selection_parameters->ColumnCount(); i++)
        {
            if(!r[i].isNull())
            {
                query.bindValue(cnt, r[i]);
                where.append(QString("%1=:val%2 AND ")
                          .arg(_selection_parameters->ColumnKeys()[i])
                          .arg(cnt));
                cnt++;
            }
        }

        if(where.length() == 0)
            THROW_NEW_GUTIL_EXCEPTION2(Core::DataTransportException,
                                       "No selection parameters specified");
        else
            where.remove(where.length() - 5, 5);

        sql = QString("SELECT %1 FROM %2 WHERE %3")
              .arg(values)
              .arg(_selection_parameters->Name())
              .arg(where);


        query.prepare(sql);

        if(query.exec())
        {
            DataTable tbl(_selection_parameters->Name());
            tbl.SetColumnHeaders(_selection_parameters->ColumnKeys(),
                                 _selection_parameters->ColumnLabels());
            while(query.next())
            {
                Custom::GVariantList lst;
                for(int i = 0; i < _selection_parameters->ColumnCount(); i++)
                    lst.append(query.value(i));
                tbl.AddNewRow(lst);
            }

            ret = tbl.ToXmlQString().toAscii();

            // Remove the row now that we've processed the query
            tbl.RemoveRow(0);
        }
        else
        {
            Core::DataTransportException ex("Query Failed");
            ex.SetData("error", query.lastError().text().toStdString());
            ex.SetData("query", sql.toStdString());
            THROW_GUTIL_EXCEPTION(ex);
        }
    }
    catch(Core::Exception &)
    {
        _database.close();
        throw;
    }
    _database.close();

    return ret;
}

bool GDatabaseIODevice::has_data_available()
{
    // We can always query the database for more data
    return true;
}
