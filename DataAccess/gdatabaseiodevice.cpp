/*Copyright 2010 George Karagoulis

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.*/

#include "gdatabaseiodevice.h"
#include "DataObjects/DataSet/datatable.h"
#include <QSqlQuery>
#include <QSqlError>
using namespace GUtil;
using namespace DataObjects;
using namespace DataAccess;

GDatabaseIODevice::GDatabaseIODevice(const QSqlDatabase &db,
                                     QObject *parent)
    :GIODevice(parent),
    _p_WriteCommand(Noop),
    _p_ReadCommand(Select),
    _database(db)
{

}

void GDatabaseIODevice::send_data(const QByteArray &d)
        throw(Core::DataTransportException)
{
    DataTable t;

    if(t.ColumnCount() == 0 || t.RowCount() == 0)
        return;

    try
    {
        t.FromXmlQString(d);
    }
    catch(Core::XmlException &ex)
    {
        THROW_NEW_GUTIL_EXCEPTION3(Core::DataTransportException,
                                  "Not a valid XML string",
                                  ex);
    }

    _database.open();
    try
    {
        for(int i = 0; i < t.RowCount(); i++)
        {
            DataRow row(t[i]);

            QSqlQuery query(_database);
            QString where;
            QString values;
            QString sql;
            switch(GetWriteCommand())
            {
            case Insert:
                for(int j = 0; j < t.ColumnCount(); j++)
                {
                    query.bindValue(i, row[j]);
                    values += QString("@val%1,").arg(j);
                }

                // Remove the trailing comma
                values.remove(values.length() - 1, 1);

                sql = QString("INSERT INTO %1 VALUES (%2)")
                      .arg(t.Name())
                      .arg(values);
                break;
            case Update:
                if(t.KeyColumns().count() == 0)
                    THROW_NEW_GUTIL_EXCEPTION2(Core::DataTransportException,
                                               "The table is required to have"
                                               " at least one key column");

                for(int j = 0; j < t.KeyColumns().count(); j++)
                {
                    // The where clause is generated by looking at the key
                    //  columns which have non-null values, and the
                    //  values clause is made by looking at all other columns
                    //  with a value.
                }

                break;
            case Delete:
                for(int j = 0; j < t.ColumnCount(); j++)
                {
                    if(!row[j].isNull())
                    {
                        query.bindValue(j, row[j]);
                        where.append(QString("%1=@val%2 AND ")
                                    .arg(t.ColumnKeys()[j])
                                    .arg(j));
                    }
                }

                if(where.length() == 0)
                    THROW_NEW_GUTIL_EXCEPTION2(Core::DataTransportException,
                                               "No parameters set for deletion");

                // Remove the trailing 'and'
                where.remove(where.length() - 5, 5);

                sql = QString("DELETE FROM %1 WHERE %2")
                      .arg(t.Name())
                      .arg(where);

                break;
            default:
                return;
            }

            if(!query.exec(sql))
            {
                THROW_NEW_GUTIL_EXCEPTION2(Core::DataTransportException,
                                           query.lastError().text().toStdString());
            }
        }
    }
    catch(Core::Exception &)
    {
        _database.close();
        throw;
    }

    _database.close();
}

QByteArray GDatabaseIODevice::receive_data()
        throw(Core::DataTransportException)
{
    QByteArray ret;

    return ret;
}

bool GDatabaseIODevice::has_data_available()
{
    // We can always query the database for more data
    return true;
}
